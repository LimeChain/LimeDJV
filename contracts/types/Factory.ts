/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FactoryInterface extends utils.Interface {
  functions: {
    "getInstantiationCount(address)": FunctionFragment;
    "getInstantiations(address)": FunctionFragment;
    "instantiations(address,uint256)": FunctionFragment;
    "isInstantiation(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getInstantiationCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstantiations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "instantiations",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInstantiation",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getInstantiationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstantiations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantiations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInstantiation",
    data: BytesLike
  ): Result;

  events: {
    "ContractInstantiation(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractInstantiation"): EventFragment;
}

export type ContractInstantiationEvent = TypedEvent<
  [string, string],
  { sender: string; instantiation: string }
>;

export type ContractInstantiationEventFilter =
  TypedEventFilter<ContractInstantiationEvent>;

export interface Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getInstantiationCount(
      creator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInstantiations(
      creator: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    instantiations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isInstantiation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getInstantiationCount(
    creator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInstantiations(
    creator: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  instantiations(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isInstantiation(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    getInstantiationCount(
      creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstantiations(
      creator: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    instantiations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isInstantiation(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "ContractInstantiation(address,address)"(
      sender?: null,
      instantiation?: null
    ): ContractInstantiationEventFilter;
    ContractInstantiation(
      sender?: null,
      instantiation?: null
    ): ContractInstantiationEventFilter;
  };

  estimateGas: {
    getInstantiationCount(
      creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstantiations(
      creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instantiations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInstantiation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getInstantiationCount(
      creator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstantiations(
      creator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instantiations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInstantiation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
