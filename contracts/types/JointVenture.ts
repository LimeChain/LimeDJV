/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type ProposalStruct = {
  destination: string;
  value: BigNumberish;
  data: BytesLike;
  executed: boolean;
};

export type ProposalStructOutput = [string, BigNumber, string, boolean] & {
  destination: string;
  value: BigNumber;
  data: string;
  executed: boolean;
};

export interface JointVentureInterface extends ethers.utils.Interface {
  functions: {
    "MAX_OWNER_COUNT()": FunctionFragment;
    "addProposer(address)": FunctionFragment;
    "addVoter(address)": FunctionFragment;
    "changeRequirement(uint256)": FunctionFragment;
    "confirmProposal(uint256)": FunctionFragment;
    "confirmations(uint256,address)": FunctionFragment;
    "description()": FunctionFragment;
    "executeProposal(uint256)": FunctionFragment;
    "getConfirmationCount(uint256)": FunctionFragment;
    "getConfirmations(uint256)": FunctionFragment;
    "getProposalCount(bool,bool)": FunctionFragment;
    "getProposalIds(uint256,uint256,bool,bool)": FunctionFragment;
    "getProposals(uint256,uint256,bool,bool)": FunctionFragment;
    "getProposers()": FunctionFragment;
    "getRevenueSplit(address)": FunctionFragment;
    "getVoters()": FunctionFragment;
    "isConfirmed(uint256)": FunctionFragment;
    "isProposer(address)": FunctionFragment;
    "isVoter(address)": FunctionFragment;
    "name()": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "proposers(uint256)": FunctionFragment;
    "removeProposer(address)": FunctionFragment;
    "removeVoter(address)": FunctionFragment;
    "replaceVoter(address,address)": FunctionFragment;
    "required()": FunctionFragment;
    "revokeConfirmation(uint256)": FunctionFragment;
    "splitRevenue(address)": FunctionFragment;
    "submitProposal(address,uint256,bytes)": FunctionFragment;
    "voters(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_OWNER_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addProposer", values: [string]): string;
  encodeFunctionData(functionFragment: "addVoter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeRequirement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmations",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmationCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalCount",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalIds",
    values: [BigNumberish, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposals",
    values: [BigNumberish, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRevenueSplit",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getVoters", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isConfirmed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isProposer", values: [string]): string;
  encodeFunctionData(functionFragment: "isVoter", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProposer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "removeVoter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "replaceVoter",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "required", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeConfirmation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "splitRevenue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voters",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_OWNER_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevenueSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVoters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isProposer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isVoter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "required", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;

  events: {
    "Confirmation(address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "Execution(uint256)": EventFragment;
    "ExecutionFailure(uint256)": EventFragment;
    "ProposerAddition(address)": EventFragment;
    "ProposerRemoval(address)": EventFragment;
    "RequirementChange(uint256)": EventFragment;
    "RevenueSplit(uint256,address[])": EventFragment;
    "Revocation(address,uint256)": EventFragment;
    "Submission(uint256)": EventFragment;
    "VoterAddition(address)": EventFragment;
    "VoterRemoval(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Confirmation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Execution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposerAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposerRemoval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequirementChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenueSplit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Submission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoterAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoterRemoval"): EventFragment;
}

export type ConfirmationEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; proposalId: BigNumber }
>;

export type ConfirmationEventFilter = TypedEventFilter<ConfirmationEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; value: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type ExecutionEvent = TypedEvent<[BigNumber], { proposalId: BigNumber }>;

export type ExecutionEventFilter = TypedEventFilter<ExecutionEvent>;

export type ExecutionFailureEvent = TypedEvent<
  [BigNumber],
  { proposalId: BigNumber }
>;

export type ExecutionFailureEventFilter =
  TypedEventFilter<ExecutionFailureEvent>;

export type ProposerAdditionEvent = TypedEvent<[string], { proposer: string }>;

export type ProposerAdditionEventFilter =
  TypedEventFilter<ProposerAdditionEvent>;

export type ProposerRemovalEvent = TypedEvent<[string], { proposer: string }>;

export type ProposerRemovalEventFilter = TypedEventFilter<ProposerRemovalEvent>;

export type RequirementChangeEvent = TypedEvent<
  [BigNumber],
  { required: BigNumber }
>;

export type RequirementChangeEventFilter =
  TypedEventFilter<RequirementChangeEvent>;

export type RevenueSplitEvent = TypedEvent<
  [BigNumber, string[]],
  { revenue: BigNumber; voters: string[] }
>;

export type RevenueSplitEventFilter = TypedEventFilter<RevenueSplitEvent>;

export type RevocationEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; proposalId: BigNumber }
>;

export type RevocationEventFilter = TypedEventFilter<RevocationEvent>;

export type SubmissionEvent = TypedEvent<
  [BigNumber],
  { proposalId: BigNumber }
>;

export type SubmissionEventFilter = TypedEventFilter<SubmissionEvent>;

export type VoterAdditionEvent = TypedEvent<[string], { voter: string }>;

export type VoterAdditionEventFilter = TypedEventFilter<VoterAdditionEvent>;

export type VoterRemovalEvent = TypedEvent<[string], { voter: string }>;

export type VoterRemovalEventFilter = TypedEventFilter<VoterRemovalEvent>;

export interface JointVenture extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JointVentureInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    addProposer(
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addVoter(
      voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    description(overrides?: CallOverrides): Promise<[string]>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getConfirmationCount(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getConfirmations(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _confirmations: string[] }>;

    getProposalCount(
      pending: boolean,
      executed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProposalIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _proposalIds: BigNumber[] }>;

    getProposals(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<
      [ProposalStructOutput[]] & { _proposals: ProposalStructOutput[] }
    >;

    getProposers(overrides?: CallOverrides): Promise<[string[]]>;

    getRevenueSplit(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { split: BigNumber }>;

    getVoters(overrides?: CallOverrides): Promise<[string[]]>;

    isConfirmed(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isProposer(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isVoter(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    proposalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean] & {
        destination: string;
        value: BigNumber;
        data: string;
        executed: boolean;
      }
    >;

    proposers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    removeProposer(
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeVoter(
      voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    replaceVoter(
      voter: string,
      newVoter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    required(overrides?: CallOverrides): Promise<[BigNumber]>;

    revokeConfirmation(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    splitRevenue(
      token: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitProposal(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voters(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

  addProposer(
    proposer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addVoter(
    voter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRequirement(
    _required: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmations(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  description(overrides?: CallOverrides): Promise<string>;

  executeProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getConfirmationCount(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getConfirmations(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getProposalCount(
    pending: boolean,
    executed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProposalIds(
    from: BigNumberish,
    to: BigNumberish,
    pending: boolean,
    executed: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getProposals(
    from: BigNumberish,
    to: BigNumberish,
    pending: boolean,
    executed: boolean,
    overrides?: CallOverrides
  ): Promise<ProposalStructOutput[]>;

  getProposers(overrides?: CallOverrides): Promise<string[]>;

  getRevenueSplit(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getVoters(overrides?: CallOverrides): Promise<string[]>;

  isConfirmed(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isProposer(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isVoter(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, boolean] & {
      destination: string;
      value: BigNumber;
      data: string;
      executed: boolean;
    }
  >;

  proposers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  removeProposer(
    proposer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeVoter(
    voter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  replaceVoter(
    voter: string,
    newVoter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  required(overrides?: CallOverrides): Promise<BigNumber>;

  revokeConfirmation(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  splitRevenue(
    token: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitProposal(
    destination: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voters(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    addProposer(proposer: string, overrides?: CallOverrides): Promise<void>;

    addVoter(voter: string, overrides?: CallOverrides): Promise<void>;

    changeRequirement(
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    description(overrides?: CallOverrides): Promise<string>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getConfirmationCount(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfirmations(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getProposalCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getProposals(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<ProposalStructOutput[]>;

    getProposers(overrides?: CallOverrides): Promise<string[]>;

    getRevenueSplit(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoters(overrides?: CallOverrides): Promise<string[]>;

    isConfirmed(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isProposer(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isVoter(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean] & {
        destination: string;
        value: BigNumber;
        data: string;
        executed: boolean;
      }
    >;

    proposers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    removeProposer(proposer: string, overrides?: CallOverrides): Promise<void>;

    removeVoter(voter: string, overrides?: CallOverrides): Promise<void>;

    replaceVoter(
      voter: string,
      newVoter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    required(overrides?: CallOverrides): Promise<BigNumber>;

    revokeConfirmation(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    splitRevenue(token: string, overrides?: CallOverrides): Promise<void>;

    submitProposal(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voters(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Confirmation(address,uint256)"(
      sender?: string | null,
      proposalId?: BigNumberish | null
    ): ConfirmationEventFilter;
    Confirmation(
      sender?: string | null,
      proposalId?: BigNumberish | null
    ): ConfirmationEventFilter;

    "Deposit(address,uint256)"(
      sender?: string | null,
      value?: null
    ): DepositEventFilter;
    Deposit(sender?: string | null, value?: null): DepositEventFilter;

    "Execution(uint256)"(
      proposalId?: BigNumberish | null
    ): ExecutionEventFilter;
    Execution(proposalId?: BigNumberish | null): ExecutionEventFilter;

    "ExecutionFailure(uint256)"(
      proposalId?: BigNumberish | null
    ): ExecutionFailureEventFilter;
    ExecutionFailure(
      proposalId?: BigNumberish | null
    ): ExecutionFailureEventFilter;

    "ProposerAddition(address)"(
      proposer?: string | null
    ): ProposerAdditionEventFilter;
    ProposerAddition(proposer?: string | null): ProposerAdditionEventFilter;

    "ProposerRemoval(address)"(
      proposer?: string | null
    ): ProposerRemovalEventFilter;
    ProposerRemoval(proposer?: string | null): ProposerRemovalEventFilter;

    "RequirementChange(uint256)"(required?: null): RequirementChangeEventFilter;
    RequirementChange(required?: null): RequirementChangeEventFilter;

    "RevenueSplit(uint256,address[])"(
      revenue?: null,
      voters?: null
    ): RevenueSplitEventFilter;
    RevenueSplit(revenue?: null, voters?: null): RevenueSplitEventFilter;

    "Revocation(address,uint256)"(
      sender?: string | null,
      proposalId?: BigNumberish | null
    ): RevocationEventFilter;
    Revocation(
      sender?: string | null,
      proposalId?: BigNumberish | null
    ): RevocationEventFilter;

    "Submission(uint256)"(
      proposalId?: BigNumberish | null
    ): SubmissionEventFilter;
    Submission(proposalId?: BigNumberish | null): SubmissionEventFilter;

    "VoterAddition(address)"(voter?: string | null): VoterAdditionEventFilter;
    VoterAddition(voter?: string | null): VoterAdditionEventFilter;

    "VoterRemoval(address)"(voter?: string | null): VoterRemovalEventFilter;
    VoterRemoval(voter?: string | null): VoterRemovalEventFilter;
  };

  estimateGas: {
    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    addProposer(
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addVoter(
      voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getConfirmationCount(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getConfirmations(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalCount(
      pending: boolean,
      executed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProposalIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposals(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposers(overrides?: CallOverrides): Promise<BigNumber>;

    getRevenueSplit(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoters(overrides?: CallOverrides): Promise<BigNumber>;

    isConfirmed(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProposer(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isVoter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeProposer(
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeVoter(
      voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    replaceVoter(
      voter: string,
      newVoter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    required(overrides?: CallOverrides): Promise<BigNumber>;

    revokeConfirmation(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    splitRevenue(
      token: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitProposal(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voters(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addProposer(
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addVoter(
      voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getConfirmationCount(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getConfirmations(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalCount(
      pending: boolean,
      executed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProposalIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposals(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRevenueSplit(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isConfirmed(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProposer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVoter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeProposer(
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeVoter(
      voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    replaceVoter(
      voter: string,
      newVoter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    required(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeConfirmation(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    splitRevenue(
      token: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitProposal(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
