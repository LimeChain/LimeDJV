/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockVentureCallsInterface extends utils.Interface {
  functions: {
    "byteArray1()": FunctionFragment;
    "lastMsgDataLength()": FunctionFragment;
    "lastMsgValue()": FunctionFragment;
    "receive1bytes(bytes)": FunctionFragment;
    "receive1uint(uint256)": FunctionFragment;
    "receive2uints(uint256,uint256)": FunctionFragment;
    "uint1()": FunctionFragment;
    "uint2()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "byteArray1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastMsgDataLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastMsgValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receive1bytes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receive1uint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receive2uints",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "uint1", values?: undefined): string;
  encodeFunctionData(functionFragment: "uint2", values?: undefined): string;

  decodeFunctionResult(functionFragment: "byteArray1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastMsgDataLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastMsgValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receive1bytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receive1uint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receive2uints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uint1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uint2", data: BytesLike): Result;

  events: {};
}

export interface MockVentureCalls extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockVentureCallsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    byteArray1(overrides?: CallOverrides): Promise<[string]>;

    lastMsgDataLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastMsgValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    receive1bytes(
      c: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    receive1uint(
      a: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    receive2uints(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uint1(overrides?: CallOverrides): Promise<[BigNumber]>;

    uint2(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  byteArray1(overrides?: CallOverrides): Promise<string>;

  lastMsgDataLength(overrides?: CallOverrides): Promise<BigNumber>;

  lastMsgValue(overrides?: CallOverrides): Promise<BigNumber>;

  receive1bytes(
    c: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  receive1uint(
    a: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  receive2uints(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uint1(overrides?: CallOverrides): Promise<BigNumber>;

  uint2(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    byteArray1(overrides?: CallOverrides): Promise<string>;

    lastMsgDataLength(overrides?: CallOverrides): Promise<BigNumber>;

    lastMsgValue(overrides?: CallOverrides): Promise<BigNumber>;

    receive1bytes(c: BytesLike, overrides?: CallOverrides): Promise<void>;

    receive1uint(a: BigNumberish, overrides?: CallOverrides): Promise<void>;

    receive2uints(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    uint1(overrides?: CallOverrides): Promise<BigNumber>;

    uint2(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    byteArray1(overrides?: CallOverrides): Promise<BigNumber>;

    lastMsgDataLength(overrides?: CallOverrides): Promise<BigNumber>;

    lastMsgValue(overrides?: CallOverrides): Promise<BigNumber>;

    receive1bytes(
      c: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    receive1uint(
      a: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    receive2uints(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uint1(overrides?: CallOverrides): Promise<BigNumber>;

    uint2(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    byteArray1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastMsgDataLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastMsgValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receive1bytes(
      c: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    receive1uint(
      a: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    receive2uints(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uint1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uint2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
